'use strict';

//
// Handle selection events and callbacks for the table component. this
// reads the components data and selected properties and sets the
// components anchor state when clicking for multiple select.
//
module.exports = function (tableComponent) {

  var type = void 0;
  function noop() {}
  var onChange = tableComponent.props.onChange || noop;

  var select = tableComponent.select || 'none';
  if (select === 'multiple' || select === 'single' || select === 'none') {
    type = select;
  } else {
    throw new Error('bootstrap table: select must be single, multiple or none');
  }

  this.getType = function () {
    return type;
  };

  this.rowClicked = function (e) {
    var row = tableComponent.getKeyAndIndex(e);
    if (type === 'none') return row; // nothing to select, just return the row clicked

    if (!row) {
      return null;
    }
    var key = row.key;
    var index = row.index;


    if (tableComponent.props.select === 'multiple') {
      this.multiSelect(key, index, e.shiftKey);
    } else {
      this.singleSelect(key, index);
    }
    return row;
  };

  this.singleSelect = function (key, index) {
    var data = tableComponent.props.data || [];
    var current = tableComponent.props.selected || {};
    var selected = {};

    if (current[key]) {
      onChange({}); // already selected, deselect it
    } else {
      selected[key] = data[index];
      onChange(selected);
    }
  };

  this.multiSelect = function (key, index, shiftKey) {
    var current = tableComponent.props.selected || {};
    var data = tableComponent.props.data || [];
    var selected = {};
    Object.keys(current).forEach(function (prop) {
      selected[prop] = current[prop];
    });

    if (shiftKey && tableComponent.state.anchor !== null) {
      var upper = null,
          lower = null;
      if (tableComponent.state.anchor > index) {
        lower = index;
        upper = tableComponent.state.anchor;
      } else if (tableComponent.state.anchor <= index) {
        lower = tableComponent.state.anchor;
        upper = index;
      } else {
        tableComponent.setState({ anchor: index });
        selected[key] = data[index];
      }
      if (lower !== null) {
        selected = {};
        for (var i = lower; i <= upper; i++) {
          var item = data[i];
          selected[item[tableComponent.keyName]] = item;
        }
      }
    } else {
      if (selected[key]) {
        delete selected[key];
      } else {
        selected[key] = data[index];
      }
      tableComponent.setState({ anchor: index });
    }

    tableComponent.onChange(selected);
  };
};