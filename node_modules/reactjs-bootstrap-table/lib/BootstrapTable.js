'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Glyph = require('./Glyph');

var _Glyph2 = _interopRequireDefault(_Glyph);

var _util = require('./util');

var _Resizer = require('./Resizer');

var _Resizer2 = _interopRequireDefault(_Resizer);

var _Selection = require('./Selection');

var _Selection2 = _interopRequireDefault(_Selection);

var _ColumnSort = require('./ColumnSort');

var _ColumnSort2 = _interopRequireDefault(_ColumnSort);

var _ColumnWidths = require('./ColumnWidths');

var _ColumnWidths2 = _interopRequireDefault(_ColumnWidths);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function noop() {}

function forceResize() {
  setTimeout(function () {
    if (document.createEvent) {
      // W3C
      var ev = document.createEvent('Event');
      ev.initEvent('resize', true, true);
      window.dispatchEvent(ev);
    } else {
      // IE
      var element = document.documentElement;
      var event = document.createEventObject();
      element.fireEvent("onresize", event);
    }
  }, 100);
}

//----------------------------------------------------------------------------
// A bootstrap table with single or multiple select.
//----------------------------------------------------------------------------

var BootstrapTable = function (_Component) {
  _inherits(BootstrapTable, _Component);

  function BootstrapTable(props, context) {
    _classCallCheck(this, BootstrapTable);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BootstrapTable).call(this, props, context));

    (0, _util.bindmethods)(['toggleSelectAll', 'rowClicked', 'setColumnWidth', 'colClicked', 'rowDoubleClicked', 'getKeyAndIndex'], _this);

    _this.keyName = _this.props.keyName || 'id';
    _this.onChange = _this.props.onChange || noop;
    _this.id = _this.props.id || 'bst-table1';
    _this.headerId = _this.id + '-header';
    _this.bodyId = _this.id + '-body';
    _this.lastScrollTop = 0;

    _this.select = 'none';
    if (_this.props.select) {
      if (_this.props.select === 'single' || _this.props.select === 'multiple' || _this.props.select === 'none') {
        _this.select = _this.props.select;
      } else {
        throw new Error('select property must be single, multiple, or none');
      }
    }

    _this.columns = [];

    if (!_this.props.columns) {
      var data = _this.props.data || [];
      if (data.length) {
        Object.keys(data[0]).forEach(function (key) {
          _this.columns.push({ name: key });
        });
      }
    } else {
      if (typeof _this.props.columns.length === 'undefined') {
        throw new Error('The columns property must be an array');
      }
      _this.columns = _this.props.columns;
    }

    _this.selection = new _Selection2.default(_this);
    _this.columnSort = new _ColumnSort2.default(_this);
    _this.columnWidths = new _ColumnWidths2.default(_this);

    _this.state = {
      selectAll: false,
      bodyHeight: _this.props.bodyHeight || '100%',
      anchor: null
    };
    return _this;
  }

  //----------------------------------------------------------------------------
  // Row clicked, update selection state
  //----------------------------------------------------------------------------

  // find the row clicked and extract it's key and index


  _createClass(BootstrapTable, [{
    key: 'getKeyAndIndex',
    value: function getKeyAndIndex(e) {
      var node = e.target,
          rid = void 0;
      // ignore clicks if the clicked on element is marked as no-select
      if (node.className && node.className.indexOf('bst-no-select') > -1) {
        return null;
      }
      // find the parent row marked with id = bst-<key>-<index>
      while (true) {
        rid = node.id;
        if (rid && rid.indexOf('bst-') === 0) {
          break;
        } else {
          node = node.parentNode;
        }
      }
      // user defined keys may have dashes, everything between "bst" and "index"
      // are part of the original key.
      var parts = rid.split('-');
      var index = parts[parts.length - 1];
      var keyParts = parts.slice(1, parts.length - 1);
      var key = keyParts.join('-');
      return { key: key, index: index };
    }
  }, {
    key: 'rowClicked',
    value: function rowClicked(e) {
      // update the selection and clear the selectAll flag, if currently checked.
      var keyAndIndex = this.selection.rowClicked(e);

      if (this.state.selectAll) {
        this.setState({ selectAll: false });
      }

      // invoke row clicked handler
      if (keyAndIndex) {
        var key = keyAndIndex.key;
        var index = keyAndIndex.index;

        var row = this.props.data[index];
        if (this.props.onRowClicked) {
          this.props.onRowClicked(row);
        }
      }
    }
  }, {
    key: 'rowDoubleClicked',
    value: function rowDoubleClicked(e) {
      var keyAndIndex = this.getKeyAndIndex(e);
      if (keyAndIndex) {
        var key = keyAndIndex.key;
        var index = keyAndIndex.index;

        var row = this.props.data[index];
        if (this.props.onRowDoubleClicked) {
          this.props.onRowDoubleClicked(row);
        }
      }
    }
  }, {
    key: 'colClicked',
    value: function colClicked(e) {
      var node = e.target,
          rid = void 0;
      // find the parent row marked with id = bst-col-<key>
      while (true) {
        rid = node.id;
        if (rid && rid.indexOf('bst-') === 0) {
          break;
        } else {
          node = node.parentNode;
        }
      }
      var parts = rid.split('-');
      var key = parts[2];

      // If the column is sortable, this changes the state internally of
      // the columnSort so force an update.
      if (this.columnSort.sort(key)) {
        this.forceUpdate();
      }
    }

    //----------------------------------------------------------------------------
    // Toggle select all state
    //----------------------------------------------------------------------------

  }, {
    key: 'toggleSelectAll',
    value: function toggleSelectAll() {
      var all = !this.state.selectAll,
          selected = {};
      var data = this.props.data || [];

      if (all) {
        data.forEach(function (item) {
          selected[item[this.keyName]] = item;
        }.bind(this));
      }
      this.setState({ selectAll: all });
      this.onChange(selected);
    }
  }, {
    key: 'onScroll',
    value: function onScroll(e) {}

    //----------------------------------------------------------------------------
    // Lifecycle
    //----------------------------------------------------------------------------

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.resize) {
        this.resizer = new _Resizer2.default(this, this.props.resize, this.columnWidths);
        this.resizer.addHandler();
        forceResize();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (newProps.select && newProps.select !== this.select) {
        this.select = newProps.select;
        this.selection = new _Selection2.default(this);
      }
      if (newProps.data && newProps.data.length === 0) {
        this.setState({ selectAll: false });
      }
      if (this.props.resize) forceResize();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.resizer) this.resizer.removeHandler();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (!(this.props.data && this.props.data.length)) {
        // no data, child element used to display empty message
        return this.props.children || _react2.default.createElement('span', null);
      }

      var headers = _react2.default.createElement('thead', null),
          body = '',
          items = [],
          rows = void 0,
          selectAll = 'unchecked';
      var selected = this.props.selected || {};

      if (this.state.selectAll) selectAll = 'check';

      // add select all header only for multiple selection
      if (this.select === 'multiple') {
        items.push(_react2.default.createElement(
          'th',
          { key: 'check', style: { width: '1em' } },
          _react2.default.createElement(_Glyph2.default, { onClick: this.toggleSelectAll, icon: selectAll })
        ));
      } else {
        items.push(_react2.default.createElement('th', { key: 'check', style: { width: '1px', borderColor: 'transparent', padding: 0 } }));
      }

      if (this.props.headers) {
        (function () {
          var ix = 1; // give header items a key to avoid react warning
          _this2.columns.map(function (col) {
            var title = col.display || col.name;
            var glyph = '';
            //if (col.sort) glyph = <Glyph icon="triangle-bottom"/>
            glyph = this.columnSort.getIcon(col.name);
            var thStyle = { width: this.columnWidths.getPercent(col.name) };
            items.push(_react2.default.createElement(
              'th',
              { key: ix++, id: 'bst-col-' + col.name,
                className: 'cbst-' + col.name,
                style: thStyle,
                onClick: this.colClicked },
              title,
              ' ',
              glyph
            ));
          }.bind(_this2));

          var tstyle = {};
          if (_this2.props.resize) tstyle = { display: 'block' };
          headers = _react2.default.createElement(
            'thead',
            { id: _this2.headerId, style: tstyle },
            _react2.default.createElement(
              'tr',
              { style: { width: '100%', cursor: 'pointer' } },
              items
            )
          );
        })();
      }

      //
      // Table rows bound to this to handle row clicks
      //
      var index = -1,
          data = this.props.data || [];
      rows = data.map(function (item) {
        var _this3 = this,
            _React$createElement;

        ++index;
        var rowId = void 0,
            row = void 0,
            icon = 'unchecked',
            clz = '',
            items = '';

        var missingKey = 'Data item missing key. If the default "id" key is not used set the keyName property.';
        var k = item[this.keyName];
        if (!k) {
          if (this.selection.getType() != 'none') {
            throw new Error(missingKey);
          }
        }

        // Used to identify the row element that was clicked. If a child is clicked, navigate up each
        // parentNode until a 'bst-' row ID is found.
        rowId = 'bst-' + k + '-' + index;

        // change styles if current row is selected
        if (selected[k]) {
          icon = 'check';
          clz = this.props.activeClass || 'active';
        }

        items = [];
        var ix = 1;

        // add select all header only for multiple selection
        if (this.select === 'multiple') {
          items.push(_react2.default.createElement(
            'td',
            { key: 'check', style: { width: '1em' } },
            _react2.default.createElement(_Glyph2.default, { icon: icon })
          ));
        } else {
          items.push(_react2.default.createElement('th', { key: 'check', style: { width: '1px', borderColor: 'transparent', padding: 0 } }));
        }

        this.columns.forEach(function (col) {
          var prop = col.name;
          var content = item[prop];
          if (col.renderer) {
            content = col.renderer(item);
            //for cases where content is true or false.
            content = typeof content === 'boolean' ? '' + content : content;
          }
          var tdStyle = { width: _this3.columnWidths.getPercent(col.name) };
          var td = _react2.default.createElement(
            'td',
            { key: ix++,
              className: 'cbst-' + col.name,
              style: tdStyle },
            content
          );
          items.push(td);
        });

        var cursor = {};
        if (this.select === 'single' || this.select === 'multiple') {
          cursor = { cursor: 'pointer' };
        }
        row = _react2.default.createElement(
          'tr',
          (_React$createElement = { style: { width: '100%' }, id: rowId, key: index }, _defineProperty(_React$createElement, 'style', cursor), _defineProperty(_React$createElement, 'className', clz), _defineProperty(_React$createElement, 'onClick', this.rowClicked), _defineProperty(_React$createElement, 'onDoubleClick', this.rowDoubleClicked), _React$createElement),
          items
        );

        return row;
      }.bind(this));

      var bodyHeight = this.state.bodyHeight || '100%';

      var style = this.props.style || {};
      if (this.props.disableSelectText) {
        ['WebkitUserSelect', 'MozUserSelect', 'msUserSelect'].forEach(function (key) {
          style[key] = 'none';
        });
      }
      var bstyle = {};
      if (this.props.resize) {
        bstyle = {
          height: bodyHeight,
          width: '100%',
          overflowY: 'auto',
          display: 'block',
          msOverflowStyle: '-ms-autohiding-scrollbar'
        };
      }

      var tableClass = this.props.tableClass || 'table table-hover table-bordered';
      var table = _react2.default.createElement(
        'table',
        { style: style, className: tableClass, id: this.id },
        headers,
        _react2.default.createElement(
          'tbody',
          { id: this.bodyId, style: bstyle, onScroll: this.onScroll.bind(this) },
          rows
        )
      );
      return table;
    }
  }]);

  return BootstrapTable;
}(_react.Component);

exports.default = BootstrapTable;